// An rule corresponding to a single rule in an iptables chain
class Rule(condition)
{
  // Incoming packet
  port in;

  // Outgoing packet when condition is true
  port match;

  // Outgoing packet when condition is false
  port fail;
}

// An action corresponding to an effectful target like LOG or MARK
class Action(action)
{
  // Incoming packet
  port in;

  // Outgoing packet
  port out;
}

// Abstract representation of userspace
class UserSpace()
{
  // Packets entering userspace
  port in;

  // Packets leaving userspace
  port out;
}

// Abstract representation of the routing table
class RoutingTable()
{
  // Incoming packets from nat PREROUTING
  port in;

  // Outgoing packets to mangle INPUT
  port local;

  // Outgoing packets to mangle FORWARD
  port forward;
}

// Abstract representation of a packet's destination outside of the current policy (eg DROP, REJECT)
class Destination()
{
  port in;
}

class Host()
{
  // All incoming interfaces
  port in;

  // All outgoing interfaces
  port out;

  // Rejected packets flow here
  domain reject = Destination();

  // Dropped packets flow here
  domain drop = Destination();

  // This host's routing table
  domain routing = RoutingTable();

  // This host's userspace
  domain userspace = UserSpace();
  domain security_INPUT_0 = Rule("-p tcp --dport 21 -m state --state NEW");
  domain security_INPUT_1 = Rule("-m state --state ESTABLISHED,RELATED");
  domain security_OUTPUT_0 = Rule("-m state --state ESTABLISHED,RELATED");
  domain security_SEL_FTPD_0 = Rule("");
  domain security_INPUT_1_CONNSECMARK = Action("--restore");
  domain security_OUTPUT_0_CONNSECMARK = Action("--restore");
  domain security_SEL_FTPD_0_SECMARK = Action("--selctx system_u:object_r:ftp_server_packet_t:s0");
  domain security_SEL_FTPD_0_SECMARK_CONNSECMARK = Action("--save");
  in --> routing.in;
  routing.forward --> drop.in;
  routing.local --> security_INPUT_0.in;
  security_INPUT_0.fail --> security_INPUT_1.in;
  security_INPUT_0.match --> security_SEL_FTPD_0.in;
  security_INPUT_1.fail --> userspace.in;
  security_INPUT_1.match --> security_INPUT_1_CONNSECMARK.in;
  security_INPUT_1_CONNSECMARK.out --> userspace.in;
  security_OUTPUT_0.fail --> out;
  security_OUTPUT_0.match --> security_OUTPUT_0_CONNSECMARK.in;
  security_OUTPUT_0_CONNSECMARK.out --> out;
  security_SEL_FTPD_0.match --> security_SEL_FTPD_0_SECMARK.in;
  security_SEL_FTPD_0_SECMARK.out --> security_SEL_FTPD_0_SECMARK_CONNSECMARK.in;
  security_SEL_FTPD_0_SECMARK_CONNSECMARK.out --> userspace.in;
  userspace.out --> security_OUTPUT_0.in;
}

domain host = Host();
